<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.bs.rental.mapper.book.BookMapper">

  <!-- - file (resultMap) -->
  <resultMap id="fileListMap" type="org.bs.rental.dto.book.BookDTO">
      <id property="book_number" column="book_number"/>
      <result property="title" column="title"/>
      <result property="author" column="author"/>
      <result property="publication_date" column="publication_date"/>
      <result property="publisher" column="publisher"/>
      <result property="isbn" column="isbn"/>
      <result property="language" column="language"/>
      <result property="total_pages" column="total_pages"/>
      <result property="description" column="description"/>
      <result property="status" column="status"/>
      <collection property="fnames" resultMap="fileMap"/>
  </resultMap>

  <resultMap id="fileMap" type="string">
      <result property="fnames" column="fnames"/>
  </resultMap>
  <!-- file (resultMap) -->

    <!-- Book List -->
    <select id="bookList" resultMap="fileListMap">
        select
            b.book_number,
            b.title,
            b.author,
            b.publication_date,
            b.publisher,
            b.language,
            b.total_pages,
            b.status,
            concat(bi.uuid, "_", bi.fname) as fnames
        from book b
        left outer join book_img bi on b.book_number = bi.book_number and bi.ord = 0 
        where b.book_number > 0
        <if test="keyword != null and types != null">
            <trim prefix="AND (" prefixOverrides="OR" suffix=")">
                <foreach collection="types" item="type" separator=" OR ">
                    <if test='type == "n"'>
                        b.book_number like concat('%', #{keyword}, '%')
                    </if>
                    <if test='type == "t"'>
                        b.title like concat('%', #{keyword}, '%')
                    </if>
                    <if test='type == "a"'>
                        b.author like concat('%', #{keyword}, '%')
                    </if>
                    <if test='type == "p"'>
                        b.publisher like concat('%', #{keyword}, '%')
                    </if>
                    <if test='type == "l"'>
                        b.language like concat('%', #{keyword}, '%')
                    </if>
                    <if test='type == "s"'>
                       b.status like concat('%', #{keyword}, '%')
                    </if>
                </foreach>
            </trim>
        </if>
        order by b.book_number desc
        limit #{skip}, #{size}
    </select>

    <!-- Book Total -->
    <select id="bookTotal">
        select COUNT(*)
        from
        (select b.book_number
            from book b
            where b.book_number > 0
                    <if test="keyword != null and types != null">
            <trim prefix="AND (" prefixOverrides="OR" suffix=")">
                <foreach collection="types" item="type" separator=" OR ">
                    <if test='type == "n"'>
                        b.book_number like concat('%', #{keyword}, '%')
                    </if>
                    <if test='type == "t"'>
                        b.title like concat('%', #{keyword}, '%')
                    </if>
                    <if test='type == "a"'>
                        b.author like concat('%', #{keyword}, '%')
                    </if>
                    <if test='type == "p"'>
                        b.publisher like concat('%', #{keyword}, '%')
                    </if>
                    <if test='type == "l"'>
                        b.language like concat('%', #{keyword}, '%')
                    </if>
                    <if test='type == "s"'>
                       l.status like concat('%', #{keyword}, '%')
                    </if>
                </foreach>
            </trim>
        </if>
            limit #{countEnd}) book
    </select>

    <!-- Book Create -->
    <insert id="bookCreate" parameterType="org.bs.rental.dto.book.BookCreateDTO">
        insert into book (
            title, author, isbn, publication_date, publisher, language, total_pages, description)
        values (
            #{title}, #{author}, #{isbn}, #{publicationDate},
            #{publisher}, #{language}, #{totalPages},#{description})
        <selectKey resultType="long" keyProperty="bookNumber" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!-- Book Read -->
    <select id="bookRead" resultMap="fileListMap">
            select
            b.book_number,
            b.title,
            b.author,
            b.isbn,
            b.publication_date,
            b.publisher,
            b.language,
            b.total_pages,
            b.description,
            b.status,
            concat(bi.uuid, "_", bi.fname) as fnames
            from book b
        left outer join book_img bi on b.book_number = bi.book_number 
        where b.book_number = #{bookNumber}
    </select>

    <!-- Book Update -->
    <update id="bookUpdate" parameterType="org.bs.rental.dto.book.BookUpdateDTO">
        update book
        set title = #{title},
            author = #{author},
            isbn = #{isbn},
            publication_date = #{publicationDate},
            publisher = #{publisher},
            language = #{language},
            total_pages = #{totalPages},
            description = #{description}
        where book_number = #{bookNumber}
    </update>

    <!-- Book Delete -->
    <delete id="bookDelete">
        delete from book
        where book_number = #{bookNumber}
    </delete>

    <!-- 회원이 대여중인 책 리스트 -->
    <select id="listOfBookBorrowedByMember" resultType="org.bs.rental.dto.book.BookListByMemberDTO" >
        select b.book_number bookNumber, l.lno, b.title, b.author, l.start_date startDate, l.status
        from book b
                 left outer join loan l on b.book_number = l.book_number
        where l.member_id = #{id} and l.status = '대출 중'
        order by l.start_date asc
        limit #{pageRequestDTO.skip}, #{pageRequestDTO.size}
    </select>

    <!-- 회원이 반납한 책 리스트 -->
    <select id="listOfBookReturnByMember" resultType="org.bs.rental.dto.book.BookListByMemberDTO" >
        select b.book_number bookNumber, l.lno, b.title, b.author, l.start_date startDate, l.return_date returnDate, l.status
        from book b
                 left outer join loan l on b.book_number = l.book_number
        where l.member_id = #{id} and l.status = '반납 완료'
        order by l.start_date asc
            limit #{pageRequestDTO.skip}, #{pageRequestDTO.size}
    </select>

</mapper>
