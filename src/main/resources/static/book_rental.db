-- member 
CREATE TABLE member (
    id VARCHAR(255) PRIMARY KEY,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    email_auth BOOLEAN NOT NULL DEFAULT FALSE,
    phone_number VARCHAR(20),
    nickname VARCHAR(50) NOT NULL UNIQUE,
    birthDate VARCHAR(255),
    accountDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    role VARCHAR(50) DEFAULT 'USER'
);


-- book
CREATE TABLE book (
    book_number INT auto_increment PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(100),
    isbn VARCHAR(13) UNIQUE,
    publication_date DATE,
    publisher VARCHAR(100),
    language VARCHAR(50),
    total_pages VARCHAR(50),
    description TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) DEFAULT '대출 가능'
);

-- loan
CREATE TABLE loan (
    lno INT auto_increment PRIMARY key ,
    book_number INT,
    member_id VARCHAR(255),
    start_date DATETIME DEFAULT CURRENT_TIMESTAMP, 
    due_date DATETIME,
    return_date DATETIME,
    status VARCHAR(20) DEFAULT '대출 중', -- 반납 완료, 대출 중
    FOREIGN KEY (book_number) REFERENCES book(book_number) ON DELETE CASCADE,
    FOREIGN KEY (member_id) REFERENCES member(id)
);

-- book_img --
create table book_img (
	imgno int auto_increment primary key,
	book_number int not null,
	fname varchar(255),
	ord int default 0 not null,
	uuid varchar(255),
	foreign key(book_number) references book(book_number) ON DELETE CASCADE
);

-- remember-me --
create table persistent_logins (
       username varchar(64) not null,
       series varchar(64) primary key,
       token varchar(64) not null,
       last_used timestamp not null
);

-- board --
CREATE TABLE board (
    tno int auto_increment primary key,
    title varchar(500) not null,
    content varchar(1000) not null,
    writer VARCHAR(255) not null,
    createDate timestamp default now(),
    updateDate timestamp default now(),
    foreign key (writer) references member(id) ON DELETE CASCADE
);

-- board_img --
create table board_img (
	imgno int auto_increment primary key,
	tno int not null,
	fname varchar(255),
	ord int default 0 not null,
	uuid varchar(255),
	foreign key(tno) references board(tno) ON DELETE CASCADE
);

-- notice --
CREATE TABLE notice (
    nno int auto_increment primary key,
    title varchar(500) not null,
    content varchar(1000) not null,
    writer VARCHAR(255) not null,
    createDate timestamp default now(),
    foreign key (writer) references member(id) ON DELETE CASCADE
);

-- notice_img --
create table notice_img (
	imgno int auto_increment primary key,
	nno int not null,
	fname varchar(255),
	ord int default 0 not null,
	uuid varchar(255),
	foreign key(nno) references notice(nno) ON DELETE CASCADE
);

-- reply -- (book, board, notice) 공통
create table board_reply (
	rno int auto_increment primary key,
	tno int not null,
	reply varchar(1000) not null,
	replyer varchar(100) not null,
	replyDate timestamp default now(),
	gno int default 0,
	status int default 0,
	foreign key(tno) references board(tno) ON DELETE CASCADE,
    foreign key(replyer) references member(id) ON DELETE CASCADE
);

-- gno 값 변경 -> 댓글
update board_reply set gno = rno where rno = rno ;

-- reply index
create index idx_board_reply on board_reply ( tno desc , rno asc);